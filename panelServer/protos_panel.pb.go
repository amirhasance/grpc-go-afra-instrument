// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        (unknown)
// source: protos_panel.proto

package afra_instrument_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimeScaleType int32

const (
	TimeScaleType_Minute_5  TimeScaleType = 0
	TimeScaleType_Minute_10 TimeScaleType = 1
	TimeScaleType_Minute_15 TimeScaleType = 2
	TimeScaleType_Minute_30 TimeScaleType = 3
	TimeScaleType_Hour_1    TimeScaleType = 4
	TimeScaleType_Hour_3    TimeScaleType = 5
	TimeScaleType_Hour_6    TimeScaleType = 6
	TimeScaleType_Hour_12   TimeScaleType = 7
	TimeScaleType_Day_1     TimeScaleType = 8
	TimeScaleType_Day_2     TimeScaleType = 9
	TimeScaleType_Day_3     TimeScaleType = 10
	TimeScaleType_Week_1    TimeScaleType = 11
	TimeScaleType_Week_2    TimeScaleType = 12
	TimeScaleType_Month_1   TimeScaleType = 13
	TimeScaleType_Month_2   TimeScaleType = 14
	TimeScaleType_Month_3   TimeScaleType = 15
	TimeScaleType_Month_6   TimeScaleType = 16
	TimeScaleType_Year_1    TimeScaleType = 17
	TimeScaleType_Year_2    TimeScaleType = 18
	TimeScaleType_Year_3    TimeScaleType = 19
)

// Enum value maps for TimeScaleType.
var (
	TimeScaleType_name = map[int32]string{
		0:  "Minute_5",
		1:  "Minute_10",
		2:  "Minute_15",
		3:  "Minute_30",
		4:  "Hour_1",
		5:  "Hour_3",
		6:  "Hour_6",
		7:  "Hour_12",
		8:  "Day_1",
		9:  "Day_2",
		10: "Day_3",
		11: "Week_1",
		12: "Week_2",
		13: "Month_1",
		14: "Month_2",
		15: "Month_3",
		16: "Month_6",
		17: "Year_1",
		18: "Year_2",
		19: "Year_3",
	}
	TimeScaleType_value = map[string]int32{
		"Minute_5":  0,
		"Minute_10": 1,
		"Minute_15": 2,
		"Minute_30": 3,
		"Hour_1":    4,
		"Hour_3":    5,
		"Hour_6":    6,
		"Hour_12":   7,
		"Day_1":     8,
		"Day_2":     9,
		"Day_3":     10,
		"Week_1":    11,
		"Week_2":    12,
		"Month_1":   13,
		"Month_2":   14,
		"Month_3":   15,
		"Month_6":   16,
		"Year_1":    17,
		"Year_2":    18,
		"Year_3":    19,
	}
)

func (x TimeScaleType) Enum() *TimeScaleType {
	p := new(TimeScaleType)
	*p = x
	return p
}

func (x TimeScaleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeScaleType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_panel_proto_enumTypes[0].Descriptor()
}

func (TimeScaleType) Type() protoreflect.EnumType {
	return &file_protos_panel_proto_enumTypes[0]
}

func (x TimeScaleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeScaleType.Descriptor instead.
func (TimeScaleType) EnumDescriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{0}
}

type Market int32

const (
	Market_BOURSE        Market = 0
	Market_FARA_BOURSE   Market = 1
	Market_BOURSE_KALA   Market = 2
	Market_BOURSE_ENERGY Market = 3
	Market_BOURSE_AATI   Market = 4
)

// Enum value maps for Market.
var (
	Market_name = map[int32]string{
		0: "BOURSE",
		1: "FARA_BOURSE",
		2: "BOURSE_KALA",
		3: "BOURSE_ENERGY",
		4: "BOURSE_AATI",
	}
	Market_value = map[string]int32{
		"BOURSE":        0,
		"FARA_BOURSE":   1,
		"BOURSE_KALA":   2,
		"BOURSE_ENERGY": 3,
		"BOURSE_AATI":   4,
	}
)

func (x Market) Enum() *Market {
	p := new(Market)
	*p = x
	return p
}

func (x Market) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Market) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_panel_proto_enumTypes[1].Descriptor()
}

func (Market) Type() protoreflect.EnumType {
	return &file_protos_panel_proto_enumTypes[1]
}

func (x Market) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Market.Descriptor instead.
func (Market) EnumDescriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{1}
}

type InstrumentStateType int32

const (
	InstrumentStateType_MOJAZ            InstrumentStateType = 0
	InstrumentStateType_MAMNOE           InstrumentStateType = 1
	InstrumentStateType_MOJAZ_MASDOD     InstrumentStateType = 2
	InstrumentStateType_MOJAZ_MOTAVAGEF  InstrumentStateType = 3
	InstrumentStateType_MOJAZ_MAHFOZ     InstrumentStateType = 4
	InstrumentStateType_MAMNOE_MASDOD    InstrumentStateType = 5
	InstrumentStateType_MAMNOE_MOTAVAGEF InstrumentStateType = 6
	InstrumentStateType_MAMNOE_MAHFOZ    InstrumentStateType = 7
)

// Enum value maps for InstrumentStateType.
var (
	InstrumentStateType_name = map[int32]string{
		0: "MOJAZ",
		1: "MAMNOE",
		2: "MOJAZ_MASDOD",
		3: "MOJAZ_MOTAVAGEF",
		4: "MOJAZ_MAHFOZ",
		5: "MAMNOE_MASDOD",
		6: "MAMNOE_MOTAVAGEF",
		7: "MAMNOE_MAHFOZ",
	}
	InstrumentStateType_value = map[string]int32{
		"MOJAZ":            0,
		"MAMNOE":           1,
		"MOJAZ_MASDOD":     2,
		"MOJAZ_MOTAVAGEF":  3,
		"MOJAZ_MAHFOZ":     4,
		"MAMNOE_MASDOD":    5,
		"MAMNOE_MOTAVAGEF": 6,
		"MAMNOE_MAHFOZ":    7,
	}
)

func (x InstrumentStateType) Enum() *InstrumentStateType {
	p := new(InstrumentStateType)
	*p = x
	return p
}

func (x InstrumentStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_panel_proto_enumTypes[2].Descriptor()
}

func (InstrumentStateType) Type() protoreflect.EnumType {
	return &file_protos_panel_proto_enumTypes[2]
}

func (x InstrumentStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentStateType.Descriptor instead.
func (InstrumentStateType) EnumDescriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{2}
}

type BaazareVabasteType int32

const (
	BaazareVabasteType_NORMAL            BaazareVabasteType = 0
	BaazareVabasteType_KHORDE_FOROSHI    BaazareVabasteType = 1
	BaazareVabasteType_JOBRANI           BaazareVabasteType = 2
	BaazareVabasteType_BLOKI_OMDE        BaazareVabasteType = 3
	BaazareVabasteType_KHARID_SHAKHES    BaazareVabasteType = 4
	BaazareVabasteType_PAZIROFTE_NASHODE BaazareVabasteType = 5
)

// Enum value maps for BaazareVabasteType.
var (
	BaazareVabasteType_name = map[int32]string{
		0: "NORMAL",
		1: "KHORDE_FOROSHI",
		2: "JOBRANI",
		3: "BLOKI_OMDE",
		4: "KHARID_SHAKHES",
		5: "PAZIROFTE_NASHODE",
	}
	BaazareVabasteType_value = map[string]int32{
		"NORMAL":            0,
		"KHORDE_FOROSHI":    1,
		"JOBRANI":           2,
		"BLOKI_OMDE":        3,
		"KHARID_SHAKHES":    4,
		"PAZIROFTE_NASHODE": 5,
	}
)

func (x BaazareVabasteType) Enum() *BaazareVabasteType {
	p := new(BaazareVabasteType)
	*p = x
	return p
}

func (x BaazareVabasteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaazareVabasteType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_panel_proto_enumTypes[3].Descriptor()
}

func (BaazareVabasteType) Type() protoreflect.EnumType {
	return &file_protos_panel_proto_enumTypes[3]
}

func (x BaazareVabasteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaazareVabasteType.Descriptor instead.
func (BaazareVabasteType) EnumDescriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{3}
}

type ValidityType int32

const (
	ValidityType_ALL              ValidityType = 0
	ValidityType_VALID            ValidityType = 1
	ValidityType_DELETED_ABSOLUTE ValidityType = 2
)

// Enum value maps for ValidityType.
var (
	ValidityType_name = map[int32]string{
		0: "ALL",
		1: "VALID",
		2: "DELETED_ABSOLUTE",
	}
	ValidityType_value = map[string]int32{
		"ALL":              0,
		"VALID":            1,
		"DELETED_ABSOLUTE": 2,
	}
)

func (x ValidityType) Enum() *ValidityType {
	p := new(ValidityType)
	*p = x
	return p
}

func (x ValidityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidityType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_panel_proto_enumTypes[4].Descriptor()
}

func (ValidityType) Type() protoreflect.EnumType {
	return &file_protos_panel_proto_enumTypes[4]
}

func (x ValidityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidityType.Descriptor instead.
func (ValidityType) EnumDescriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{4}
}

type InstrumentType int32

const (
	InstrumentType_SHAKHESE_GHEIMAT__SHAKHES                                                 InstrumentType = 0
	InstrumentType_SHAKHESE__SHAKHES                                                         InstrumentType = 1
	InstrumentType_ORAGHE_SAKOK__ORAGHE_MOSHAREKAT                                           InstrumentType = 2
	InstrumentType_SAHAM__SAHAME_ADI                                                         InstrumentType = 3
	InstrumentType_SANDOGHE_SARMAYE_GOZARY_DAR_SAHAME_BOURS__SANDOGHE_SARMAYE_GOZARY         InstrumentType = 4
	InstrumentType_TESTE_PAYE__TESTE_PAYE                                                    InstrumentType = 5
	InstrumentType_EKHTIARE_FULADE_HORMOZGAN                                                 InstrumentType = 6
	InstrumentType_EKHTIARE_KH_AKHZA                                                         InstrumentType = 7
	InstrumentType_EKHTIARE_F_AKHZA                                                          InstrumentType = 8
	InstrumentType_HAGHE_TAGHADOME_SAHM__HAGHE_TAGHADOM                                      InstrumentType = 9
	InstrumentType_SHAKHESE_FARABOURS__SHAKHES                                               InstrumentType = 10
	InstrumentType_SAKOK_EKHTESASI__ORAGHE_MOSHAREKAT_0                                      InstrumentType = 11
	InstrumentType_SAKOK_EKHTESASI__ORAGHE_MOSHAREKAT_1                                      InstrumentType = 12
	InstrumentType_OTISI__SAHAME_ADI                                                         InstrumentType = 13
	InstrumentType_ORAGHE_MOSHAREKATE_OTISI__ORAGHE_MOSHAREKAT                               InstrumentType = 14
	InstrumentType_TASHILATE_FARABOURS__SAHAME_ADI                                           InstrumentType = 15
	InstrumentType_SHERKATHAYE_KOCHAKO_MOTEVASET__SAHAME_ADI                                 InstrumentType = 16
	InstrumentType_HAGHE_TAGHADOME_OTISI__HAGHE_TAGHADOM                                     InstrumentType = 17
	InstrumentType_EKHTIARE_FOROSHE_TABAYI                                                   InstrumentType = 18
	InstrumentType_DARAYI_FEKRI__DARAYI_FEKRI                                                InstrumentType = 19
	InstrumentType_ORAGHE_MOSHAREKAT__ORAGHE_MOSHAREKAT                                      InstrumentType = 20
	InstrumentType_AATI__SAHAME_ADI                                                          InstrumentType = 21
	InstrumentType_EKHTIARE_KHARID__SAHAME_ADI                                               InstrumentType = 22
	InstrumentType_EKHTIARE_FOROSH__SAHAME_ADI                                               InstrumentType = 23
	InstrumentType_EKHTIARE_FOROSHE_TABAYI__EKHTIAR                                          InstrumentType = 24
	InstrumentType_EKHTIARE_FOROSHE_TABAYI_FARABOURS__EKHTIAR                                InstrumentType = 25
	InstrumentType_PAYE__SAHAME_ADI                                                          InstrumentType = 26
	InstrumentType_HAGHE_TAGHADOME_PAYE__HAGHE_TAGHADOM                                      InstrumentType = 27
	InstrumentType_ORAGHE_MOSHAREKATE_ARZE_SADERATI__ORAGHE_MOSHAREKAT                       InstrumentType = 28
	InstrumentType_ORAGHE_MOSHAREKATE_ENERGY__ORAGHE_MOSHAREKAT                              InstrumentType = 29
	InstrumentType_SANDOGHE_SARMAYE_GOZARY_GHABELE_MOAMELEYE_ENERGY__SANDOGHE_SARMAYE_GOZARY InstrumentType = 30
	InstrumentType_SALAF_BOURS_ENERGY_1                                                      InstrumentType = 31
	InstrumentType_SALAF_BOURS_ENERGY_2                                                      InstrumentType = 32
	InstrumentType_SALAF_BOURS_ENERGY_3                                                      InstrumentType = 33
	InstrumentType_SALAF_BOURS_ENERGY_4                                                      InstrumentType = 34
	InstrumentType_ENERGY_1                                                                  InstrumentType = 35
	InstrumentType_ENERGY_2                                                                  InstrumentType = 36
	InstrumentType_ORAGHE_MOSHAREKATE_KALA__ORAGHE_MOSHAREKAT                                InstrumentType = 37
	InstrumentType_GOVAHIE_SEPORDEYE_KALAEI__KALA                                            InstrumentType = 38
	InstrumentType_JAYEZEYE_SAHM                                                             InstrumentType = 39
	InstrumentType_SABADE_GHABELE_MOAMELE_DAR_BOURS                                          InstrumentType = 40
	InstrumentType_GOVAHIE_KHARIDE_SAHM                                                      InstrumentType = 41
	InstrumentType_SABADE_MOSHAEE                                                            InstrumentType = 42
	InstrumentType_UNKNOWN_402                                                               InstrumentType = 43
	InstrumentType_UNKNOWN_805                                                               InstrumentType = 44
	InstrumentType_UNKNOWN_401                                                               InstrumentType = 45
	InstrumentType_UNKNOWN_605                                                               InstrumentType = 46
	InstrumentType_UNKNOWN_310                                                               InstrumentType = 47
	InstrumentType_UNKNOWN_380                                                               InstrumentType = 48
	InstrumentType_UNKNOWN_320                                                               InstrumentType = 49
	InstrumentType_UNKNOWN_201                                                               InstrumentType = 50
)

// Enum value maps for InstrumentType.
var (
	InstrumentType_name = map[int32]string{
		0:  "SHAKHESE_GHEIMAT__SHAKHES",
		1:  "SHAKHESE__SHAKHES",
		2:  "ORAGHE_SAKOK__ORAGHE_MOSHAREKAT",
		3:  "SAHAM__SAHAME_ADI",
		4:  "SANDOGHE_SARMAYE_GOZARY_DAR_SAHAME_BOURS__SANDOGHE_SARMAYE_GOZARY",
		5:  "TESTE_PAYE__TESTE_PAYE",
		6:  "EKHTIARE_FULADE_HORMOZGAN",
		7:  "EKHTIARE_KH_AKHZA",
		8:  "EKHTIARE_F_AKHZA",
		9:  "HAGHE_TAGHADOME_SAHM__HAGHE_TAGHADOM",
		10: "SHAKHESE_FARABOURS__SHAKHES",
		11: "SAKOK_EKHTESASI__ORAGHE_MOSHAREKAT_0",
		12: "SAKOK_EKHTESASI__ORAGHE_MOSHAREKAT_1",
		13: "OTISI__SAHAME_ADI",
		14: "ORAGHE_MOSHAREKATE_OTISI__ORAGHE_MOSHAREKAT",
		15: "TASHILATE_FARABOURS__SAHAME_ADI",
		16: "SHERKATHAYE_KOCHAKO_MOTEVASET__SAHAME_ADI",
		17: "HAGHE_TAGHADOME_OTISI__HAGHE_TAGHADOM",
		18: "EKHTIARE_FOROSHE_TABAYI",
		19: "DARAYI_FEKRI__DARAYI_FEKRI",
		20: "ORAGHE_MOSHAREKAT__ORAGHE_MOSHAREKAT",
		21: "AATI__SAHAME_ADI",
		22: "EKHTIARE_KHARID__SAHAME_ADI",
		23: "EKHTIARE_FOROSH__SAHAME_ADI",
		24: "EKHTIARE_FOROSHE_TABAYI__EKHTIAR",
		25: "EKHTIARE_FOROSHE_TABAYI_FARABOURS__EKHTIAR",
		26: "PAYE__SAHAME_ADI",
		27: "HAGHE_TAGHADOME_PAYE__HAGHE_TAGHADOM",
		28: "ORAGHE_MOSHAREKATE_ARZE_SADERATI__ORAGHE_MOSHAREKAT",
		29: "ORAGHE_MOSHAREKATE_ENERGY__ORAGHE_MOSHAREKAT",
		30: "SANDOGHE_SARMAYE_GOZARY_GHABELE_MOAMELEYE_ENERGY__SANDOGHE_SARMAYE_GOZARY",
		31: "SALAF_BOURS_ENERGY_1",
		32: "SALAF_BOURS_ENERGY_2",
		33: "SALAF_BOURS_ENERGY_3",
		34: "SALAF_BOURS_ENERGY_4",
		35: "ENERGY_1",
		36: "ENERGY_2",
		37: "ORAGHE_MOSHAREKATE_KALA__ORAGHE_MOSHAREKAT",
		38: "GOVAHIE_SEPORDEYE_KALAEI__KALA",
		39: "JAYEZEYE_SAHM",
		40: "SABADE_GHABELE_MOAMELE_DAR_BOURS",
		41: "GOVAHIE_KHARIDE_SAHM",
		42: "SABADE_MOSHAEE",
		43: "UNKNOWN_402",
		44: "UNKNOWN_805",
		45: "UNKNOWN_401",
		46: "UNKNOWN_605",
		47: "UNKNOWN_310",
		48: "UNKNOWN_380",
		49: "UNKNOWN_320",
		50: "UNKNOWN_201",
	}
	InstrumentType_value = map[string]int32{
		"SHAKHESE_GHEIMAT__SHAKHES":       0,
		"SHAKHESE__SHAKHES":               1,
		"ORAGHE_SAKOK__ORAGHE_MOSHAREKAT": 2,
		"SAHAM__SAHAME_ADI":               3,
		"SANDOGHE_SARMAYE_GOZARY_DAR_SAHAME_BOURS__SANDOGHE_SARMAYE_GOZARY": 4,
		"TESTE_PAYE__TESTE_PAYE":                                                    5,
		"EKHTIARE_FULADE_HORMOZGAN":                                                 6,
		"EKHTIARE_KH_AKHZA":                                                         7,
		"EKHTIARE_F_AKHZA":                                                          8,
		"HAGHE_TAGHADOME_SAHM__HAGHE_TAGHADOM":                                      9,
		"SHAKHESE_FARABOURS__SHAKHES":                                               10,
		"SAKOK_EKHTESASI__ORAGHE_MOSHAREKAT_0":                                      11,
		"SAKOK_EKHTESASI__ORAGHE_MOSHAREKAT_1":                                      12,
		"OTISI__SAHAME_ADI":                                                         13,
		"ORAGHE_MOSHAREKATE_OTISI__ORAGHE_MOSHAREKAT":                               14,
		"TASHILATE_FARABOURS__SAHAME_ADI":                                           15,
		"SHERKATHAYE_KOCHAKO_MOTEVASET__SAHAME_ADI":                                 16,
		"HAGHE_TAGHADOME_OTISI__HAGHE_TAGHADOM":                                     17,
		"EKHTIARE_FOROSHE_TABAYI":                                                   18,
		"DARAYI_FEKRI__DARAYI_FEKRI":                                                19,
		"ORAGHE_MOSHAREKAT__ORAGHE_MOSHAREKAT":                                      20,
		"AATI__SAHAME_ADI":                                                          21,
		"EKHTIARE_KHARID__SAHAME_ADI":                                               22,
		"EKHTIARE_FOROSH__SAHAME_ADI":                                               23,
		"EKHTIARE_FOROSHE_TABAYI__EKHTIAR":                                          24,
		"EKHTIARE_FOROSHE_TABAYI_FARABOURS__EKHTIAR":                                25,
		"PAYE__SAHAME_ADI":                                                          26,
		"HAGHE_TAGHADOME_PAYE__HAGHE_TAGHADOM":                                      27,
		"ORAGHE_MOSHAREKATE_ARZE_SADERATI__ORAGHE_MOSHAREKAT":                       28,
		"ORAGHE_MOSHAREKATE_ENERGY__ORAGHE_MOSHAREKAT":                              29,
		"SANDOGHE_SARMAYE_GOZARY_GHABELE_MOAMELEYE_ENERGY__SANDOGHE_SARMAYE_GOZARY": 30,
		"SALAF_BOURS_ENERGY_1":                                                      31,
		"SALAF_BOURS_ENERGY_2":                                                      32,
		"SALAF_BOURS_ENERGY_3":                                                      33,
		"SALAF_BOURS_ENERGY_4":                                                      34,
		"ENERGY_1":                                                                  35,
		"ENERGY_2":                                                                  36,
		"ORAGHE_MOSHAREKATE_KALA__ORAGHE_MOSHAREKAT":                                37,
		"GOVAHIE_SEPORDEYE_KALAEI__KALA":                                            38,
		"JAYEZEYE_SAHM":                                                             39,
		"SABADE_GHABELE_MOAMELE_DAR_BOURS":                                          40,
		"GOVAHIE_KHARIDE_SAHM":                                                      41,
		"SABADE_MOSHAEE":                                                            42,
		"UNKNOWN_402":                                                               43,
		"UNKNOWN_805":                                                               44,
		"UNKNOWN_401":                                                               45,
		"UNKNOWN_605":                                                               46,
		"UNKNOWN_310":                                                               47,
		"UNKNOWN_380":                                                               48,
		"UNKNOWN_320":                                                               49,
		"UNKNOWN_201":                                                               50,
	}
)

func (x InstrumentType) Enum() *InstrumentType {
	p := new(InstrumentType)
	*p = x
	return p
}

func (x InstrumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_panel_proto_enumTypes[5].Descriptor()
}

func (InstrumentType) Type() protoreflect.EnumType {
	return &file_protos_panel_proto_enumTypes[5]
}

func (x InstrumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentType.Descriptor instead.
func (InstrumentType) EnumDescriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{5}
}

type IndexHistoricalPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceList []*IndexHistoricalPrice `protobuf:"bytes,1,rep,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
}

func (x *IndexHistoricalPriceResponse) Reset() {
	*x = IndexHistoricalPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexHistoricalPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexHistoricalPriceResponse) ProtoMessage() {}

func (x *IndexHistoricalPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexHistoricalPriceResponse.ProtoReflect.Descriptor instead.
func (*IndexHistoricalPriceResponse) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{0}
}

func (x *IndexHistoricalPriceResponse) GetPriceList() []*IndexHistoricalPrice {
	if x != nil {
		return x.PriceList
	}
	return nil
}

type HistoricalPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceList []*HistoricalPrice `protobuf:"bytes,1,rep,name=price_list,json=priceList,proto3" json:"price_list,omitempty"`
}

func (x *HistoricalPriceResponse) Reset() {
	*x = HistoricalPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalPriceResponse) ProtoMessage() {}

func (x *HistoricalPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalPriceResponse.ProtoReflect.Descriptor instead.
func (*HistoricalPriceResponse) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{1}
}

func (x *HistoricalPriceResponse) GetPriceList() []*HistoricalPrice {
	if x != nil {
		return x.PriceList
	}
	return nil
}

type IndexHistoricalPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string                       `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	PointList []*IndexHistoricalPricePoint `protobuf:"bytes,2,rep,name=point_list,json=pointList,proto3" json:"point_list,omitempty"`
}

func (x *IndexHistoricalPrice) Reset() {
	*x = IndexHistoricalPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexHistoricalPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexHistoricalPrice) ProtoMessage() {}

func (x *IndexHistoricalPrice) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexHistoricalPrice.ProtoReflect.Descriptor instead.
func (*IndexHistoricalPrice) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{2}
}

func (x *IndexHistoricalPrice) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *IndexHistoricalPrice) GetPointList() []*IndexHistoricalPricePoint {
	if x != nil {
		return x.PointList
	}
	return nil
}

type HistoricalPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string                  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	PointList []*HistoricalPricePoint `protobuf:"bytes,2,rep,name=point_list,json=pointList,proto3" json:"point_list,omitempty"`
}

func (x *HistoricalPrice) Reset() {
	*x = HistoricalPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalPrice) ProtoMessage() {}

func (x *HistoricalPrice) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalPrice.ProtoReflect.Descriptor instead.
func (*HistoricalPrice) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{3}
}

func (x *HistoricalPrice) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *HistoricalPrice) GetPointList() []*HistoricalPricePoint {
	if x != nil {
		return x.PointList
	}
	return nil
}

type IndexHistoricalPricePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datetime                  string  `protobuf:"bytes,1,opt,name=datetime,proto3" json:"datetime,omitempty"`
	IndexValue                float32 `protobuf:"fixed32,2,opt,name=index_value,json=indexValue,proto3" json:"index_value,omitempty"`
	MaximumIndexInDay         float32 `protobuf:"fixed32,3,opt,name=maximum_index_in_day,json=maximumIndexInDay,proto3" json:"maximum_index_in_day,omitempty"`
	MinimumIndexInDay         float32 `protobuf:"fixed32,4,opt,name=minimum_index_in_day,json=minimumIndexInDay,proto3" json:"minimum_index_in_day,omitempty"`
	YesterdayFundValue        float32 `protobuf:"fixed32,5,opt,name=yesterday_fund_value,json=yesterdayFundValue,proto3" json:"yesterday_fund_value,omitempty"`
	FundAdjustmentCoefficient float32 `protobuf:"fixed32,6,opt,name=fund_adjustment_coefficient,json=fundAdjustmentCoefficient,proto3" json:"fund_adjustment_coefficient,omitempty"`
	ProfitValue               float32 `protobuf:"fixed32,7,opt,name=profit_value,json=profitValue,proto3" json:"profit_value,omitempty"`
}

func (x *IndexHistoricalPricePoint) Reset() {
	*x = IndexHistoricalPricePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexHistoricalPricePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexHistoricalPricePoint) ProtoMessage() {}

func (x *IndexHistoricalPricePoint) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexHistoricalPricePoint.ProtoReflect.Descriptor instead.
func (*IndexHistoricalPricePoint) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{4}
}

func (x *IndexHistoricalPricePoint) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *IndexHistoricalPricePoint) GetIndexValue() float32 {
	if x != nil {
		return x.IndexValue
	}
	return 0
}

func (x *IndexHistoricalPricePoint) GetMaximumIndexInDay() float32 {
	if x != nil {
		return x.MaximumIndexInDay
	}
	return 0
}

func (x *IndexHistoricalPricePoint) GetMinimumIndexInDay() float32 {
	if x != nil {
		return x.MinimumIndexInDay
	}
	return 0
}

func (x *IndexHistoricalPricePoint) GetYesterdayFundValue() float32 {
	if x != nil {
		return x.YesterdayFundValue
	}
	return 0
}

func (x *IndexHistoricalPricePoint) GetFundAdjustmentCoefficient() float32 {
	if x != nil {
		return x.FundAdjustmentCoefficient
	}
	return 0
}

func (x *IndexHistoricalPricePoint) GetProfitValue() float32 {
	if x != nil {
		return x.ProfitValue
	}
	return 0
}

type HistoricalPricePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datetime    string `protobuf:"bytes,1,opt,name=datetime,proto3" json:"datetime,omitempty"`
	Highest     uint32 `protobuf:"varint,2,opt,name=highest,proto3" json:"highest,omitempty"`
	Lowest      uint32 `protobuf:"varint,3,opt,name=lowest,proto3" json:"lowest,omitempty"`
	Open        uint32 `protobuf:"varint,4,opt,name=open,proto3" json:"open,omitempty"`
	Close       uint32 `protobuf:"varint,5,opt,name=close,proto3" json:"close,omitempty"`
	Average     uint32 `protobuf:"varint,6,opt,name=average,proto3" json:"average,omitempty"`
	TradeVolume string `protobuf:"bytes,7,opt,name=trade_volume,json=tradeVolume,proto3" json:"trade_volume,omitempty"`
}

func (x *HistoricalPricePoint) Reset() {
	*x = HistoricalPricePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalPricePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalPricePoint) ProtoMessage() {}

func (x *HistoricalPricePoint) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalPricePoint.ProtoReflect.Descriptor instead.
func (*HistoricalPricePoint) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{5}
}

func (x *HistoricalPricePoint) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *HistoricalPricePoint) GetHighest() uint32 {
	if x != nil {
		return x.Highest
	}
	return 0
}

func (x *HistoricalPricePoint) GetLowest() uint32 {
	if x != nil {
		return x.Lowest
	}
	return 0
}

func (x *HistoricalPricePoint) GetOpen() uint32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *HistoricalPricePoint) GetClose() uint32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *HistoricalPricePoint) GetAverage() uint32 {
	if x != nil {
		return x.Average
	}
	return 0
}

func (x *HistoricalPricePoint) GetTradeVolume() string {
	if x != nil {
		return x.TradeVolume
	}
	return ""
}

type HistoricalPriceQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeScale TimeScaleType `protobuf:"varint,1,opt,name=time_scale,json=timeScale,proto3,enum=afra.instrument.v1.TimeScaleType" json:"time_scale,omitempty"`
	Start     string        `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End       string        `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	CodeList  []string      `protobuf:"bytes,4,rep,name=code_list,json=codeList,proto3" json:"code_list,omitempty"`
}

func (x *HistoricalPriceQuery) Reset() {
	*x = HistoricalPriceQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalPriceQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalPriceQuery) ProtoMessage() {}

func (x *HistoricalPriceQuery) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalPriceQuery.ProtoReflect.Descriptor instead.
func (*HistoricalPriceQuery) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{6}
}

func (x *HistoricalPriceQuery) GetTimeScale() TimeScaleType {
	if x != nil {
		return x.TimeScale
	}
	return TimeScaleType_Minute_5
}

func (x *HistoricalPriceQuery) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *HistoricalPriceQuery) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *HistoricalPriceQuery) GetCodeList() []string {
	if x != nil {
		return x.CodeList
	}
	return nil
}

type InstrumentSnapshotQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshInterval int32    `protobuf:"varint,1,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"` // based on mili second . default is 10_000
	CodeList        []string `protobuf:"bytes,2,rep,name=code_list,json=codeList,proto3" json:"code_list,omitempty"`
}

func (x *InstrumentSnapshotQuery) Reset() {
	*x = InstrumentSnapshotQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentSnapshotQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentSnapshotQuery) ProtoMessage() {}

func (x *InstrumentSnapshotQuery) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentSnapshotQuery.ProtoReflect.Descriptor instead.
func (*InstrumentSnapshotQuery) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{7}
}

func (x *InstrumentSnapshotQuery) GetRefreshInterval() int32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *InstrumentSnapshotQuery) GetCodeList() []string {
	if x != nil {
		return x.CodeList
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price  uint32 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	Volume uint64 `protobuf:"varint,2,opt,name=volume,proto3" json:"volume,omitempty"`
	Count  uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{8}
}

func (x *Order) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Order) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Order) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TradeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume uint64 `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	Count  uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TradeReport) Reset() {
	*x = TradeReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeReport) ProtoMessage() {}

func (x *TradeReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeReport.ProtoReflect.Descriptor instead.
func (*TradeReport) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{9}
}

func (x *TradeReport) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TradeReport) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type InstrumentSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                          string              `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	LastTradedPrice               uint32              `protobuf:"varint,2,opt,name=last_traded_price,json=lastTradedPrice,proto3" json:"last_traded_price,omitempty"`
	LastTradedVolume              string              `protobuf:"bytes,3,opt,name=last_traded_volume,json=lastTradedVolume,proto3" json:"last_traded_volume,omitempty"`
	SellOrderList                 []*Order            `protobuf:"bytes,4,rep,name=sell_order_list,json=sellOrderList,proto3" json:"sell_order_list,omitempty"`
	BuyOrderList                  []*Order            `protobuf:"bytes,5,rep,name=buy_order_list,json=buyOrderList,proto3" json:"buy_order_list,omitempty"`
	RealPersonBuyersTradeReport   *TradeReport        `protobuf:"bytes,6,opt,name=real_person_buyers_trade_report,json=realPersonBuyersTradeReport,proto3" json:"real_person_buyers_trade_report,omitempty"`
	RealPersonSellersTradeReport  *TradeReport        `protobuf:"bytes,7,opt,name=real_person_sellers_trade_report,json=realPersonSellersTradeReport,proto3" json:"real_person_sellers_trade_report,omitempty"`
	LegalPersonBuyersTradeReport  *TradeReport        `protobuf:"bytes,8,opt,name=legal_person_buyers_trade_report,json=legalPersonBuyersTradeReport,proto3" json:"legal_person_buyers_trade_report,omitempty"`
	LegalPersonSellersTradeReport *TradeReport        `protobuf:"bytes,9,opt,name=legal_person_sellers_trade_report,json=legalPersonSellersTradeReport,proto3" json:"legal_person_sellers_trade_report,omitempty"`
	CurrentStateType              InstrumentStateType `protobuf:"varint,10,opt,name=current_state_type,json=currentStateType,proto3,enum=afra.instrument.v1.InstrumentStateType" json:"current_state_type,omitempty"`
	EffectOnTotalIndex            float32             `protobuf:"fixed32,11,opt,name=effect_on_total_index,json=effectOnTotalIndex,proto3" json:"effect_on_total_index,omitempty"`
}

func (x *InstrumentSnapshotResponse) Reset() {
	*x = InstrumentSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentSnapshotResponse) ProtoMessage() {}

func (x *InstrumentSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentSnapshotResponse.ProtoReflect.Descriptor instead.
func (*InstrumentSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{10}
}

func (x *InstrumentSnapshotResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *InstrumentSnapshotResponse) GetLastTradedPrice() uint32 {
	if x != nil {
		return x.LastTradedPrice
	}
	return 0
}

func (x *InstrumentSnapshotResponse) GetLastTradedVolume() string {
	if x != nil {
		return x.LastTradedVolume
	}
	return ""
}

func (x *InstrumentSnapshotResponse) GetSellOrderList() []*Order {
	if x != nil {
		return x.SellOrderList
	}
	return nil
}

func (x *InstrumentSnapshotResponse) GetBuyOrderList() []*Order {
	if x != nil {
		return x.BuyOrderList
	}
	return nil
}

func (x *InstrumentSnapshotResponse) GetRealPersonBuyersTradeReport() *TradeReport {
	if x != nil {
		return x.RealPersonBuyersTradeReport
	}
	return nil
}

func (x *InstrumentSnapshotResponse) GetRealPersonSellersTradeReport() *TradeReport {
	if x != nil {
		return x.RealPersonSellersTradeReport
	}
	return nil
}

func (x *InstrumentSnapshotResponse) GetLegalPersonBuyersTradeReport() *TradeReport {
	if x != nil {
		return x.LegalPersonBuyersTradeReport
	}
	return nil
}

func (x *InstrumentSnapshotResponse) GetLegalPersonSellersTradeReport() *TradeReport {
	if x != nil {
		return x.LegalPersonSellersTradeReport
	}
	return nil
}

func (x *InstrumentSnapshotResponse) GetCurrentStateType() InstrumentStateType {
	if x != nil {
		return x.CurrentStateType
	}
	return InstrumentStateType_MOJAZ
}

func (x *InstrumentSnapshotResponse) GetEffectOnTotalIndex() float32 {
	if x != nil {
		return x.EffectOnTotalIndex
	}
	return 0
}

type SearchInstrumentInfoQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeList     []string     `protobuf:"bytes,1,rep,name=code_list,json=codeList,proto3" json:"code_list,omitempty"`
	MarketList   []Market     `protobuf:"varint,2,rep,packed,name=market_list,json=marketList,proto3,enum=afra.instrument.v1.Market" json:"market_list,omitempty"`
	ValidityType ValidityType `protobuf:"varint,3,opt,name=validity_type,json=validityType,proto3,enum=afra.instrument.v1.ValidityType" json:"validity_type,omitempty"`
}

func (x *SearchInstrumentInfoQuery) Reset() {
	*x = SearchInstrumentInfoQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInstrumentInfoQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInstrumentInfoQuery) ProtoMessage() {}

func (x *SearchInstrumentInfoQuery) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInstrumentInfoQuery.ProtoReflect.Descriptor instead.
func (*SearchInstrumentInfoQuery) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{11}
}

func (x *SearchInstrumentInfoQuery) GetCodeList() []string {
	if x != nil {
		return x.CodeList
	}
	return nil
}

func (x *SearchInstrumentInfoQuery) GetMarketList() []Market {
	if x != nil {
		return x.MarketList
	}
	return nil
}

func (x *SearchInstrumentInfoQuery) GetValidityType() ValidityType {
	if x != nil {
		return x.ValidityType
	}
	return ValidityType_ALL
}

type SearchInstrumentInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentList []*InstrumentInfo `protobuf:"bytes,1,rep,name=instrument_list,json=instrumentList,proto3" json:"instrument_list,omitempty"`
}

func (x *SearchInstrumentInfoResponse) Reset() {
	*x = SearchInstrumentInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchInstrumentInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInstrumentInfoResponse) ProtoMessage() {}

func (x *SearchInstrumentInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInstrumentInfoResponse.ProtoReflect.Descriptor instead.
func (*SearchInstrumentInfoResponse) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{12}
}

func (x *SearchInstrumentInfoResponse) GetInstrumentList() []*InstrumentInfo {
	if x != nil {
		return x.InstrumentList
	}
	return nil
}

type InstrumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code                          string              `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	LastActiveDate                string              `protobuf:"bytes,2,opt,name=last_active_date,json=lastActiveDate,proto3" json:"last_active_date,omitempty"`
	TseId                         string              `protobuf:"bytes,3,opt,name=tse_id,json=tseId,proto3" json:"tse_id,omitempty"`
	LatinCode                     string              `protobuf:"bytes,4,opt,name=latin_code,json=latinCode,proto3" json:"latin_code,omitempty"`
	LatinName                     string              `protobuf:"bytes,5,opt,name=latin_name,json=latinName,proto3" json:"latin_name,omitempty"`
	PersianCode                   string              `protobuf:"bytes,6,opt,name=persian_code,json=persianCode,proto3" json:"persian_code,omitempty"`
	PersianName                   string              `protobuf:"bytes,7,opt,name=persian_name,json=persianName,proto3" json:"persian_name,omitempty"`
	ParValue                      uint32              `protobuf:"varint,8,opt,name=par_value,json=parValue,proto3" json:"par_value,omitempty"` // gheimat esmi
	SharesCount                   uint64              `protobuf:"varint,9,opt,name=shares_count,json=sharesCount,proto3" json:"shares_count,omitempty"`
	FirstTradeDate                string              `protobuf:"bytes,10,opt,name=first_trade_date,json=firstTradeDate,proto3" json:"first_trade_date,omitempty"`
	Market                        Market              `protobuf:"varint,11,opt,name=market,proto3,enum=afra.instrument.v1.Market" json:"market,omitempty"`
	SectorId                      string              `protobuf:"bytes,12,opt,name=sector_id,json=sectorId,proto3" json:"sector_id,omitempty"`
	SubSectorId                   string              `protobuf:"bytes,13,opt,name=sub_sector_id,json=subSectorId,proto3" json:"sub_sector_id,omitempty"`
	MaximumAllowedPrice           uint32              `protobuf:"varint,14,opt,name=maximum_allowed_price,json=maximumAllowedPrice,proto3" json:"maximum_allowed_price,omitempty"`
	MinimumAllowedPrice           uint32              `protobuf:"varint,15,opt,name=minimum_allowed_price,json=minimumAllowedPrice,proto3" json:"minimum_allowed_price,omitempty"`
	BaseShareVolume               uint64              `protobuf:"varint,16,opt,name=base_share_volume,json=baseShareVolume,proto3" json:"base_share_volume,omitempty"`
	Tick                          uint32              `protobuf:"varint,17,opt,name=tick,proto3" json:"tick,omitempty"`
	MinimumSharesNumber           uint32              `protobuf:"varint,18,opt,name=minimum_shares_number,json=minimumSharesNumber,proto3" json:"minimum_shares_number,omitempty"`
	CompanyIsin                   string              `protobuf:"bytes,19,opt,name=company_isin,json=companyIsin,proto3" json:"company_isin,omitempty"`
	CompanyLatinCode              string              `protobuf:"bytes,20,opt,name=company_latin_code,json=companyLatinCode,proto3" json:"company_latin_code,omitempty"`
	CompanyPersianName            string              `protobuf:"bytes,21,opt,name=company_persian_name,json=companyPersianName,proto3" json:"company_persian_name,omitempty"`
	YesterdayPrice                uint32              `protobuf:"varint,22,opt,name=yesterday_price,json=yesterdayPrice,proto3" json:"yesterday_price,omitempty"`
	YesterdayTradedVolume         string              `protobuf:"bytes,23,opt,name=yesterday_traded_volume,json=yesterdayTradedVolume,proto3" json:"yesterday_traded_volume,omitempty"`
	TodayOpeningPrice             uint32              `protobuf:"varint,24,opt,name=today_opening_price,json=todayOpeningPrice,proto3" json:"today_opening_price,omitempty"`
	TodayClosingPrice             uint32              `protobuf:"varint,25,opt,name=today_closing_price,json=todayClosingPrice,proto3" json:"today_closing_price,omitempty"`
	PriceToEarning                float32             `protobuf:"fixed32,26,opt,name=price_to_earning,json=priceToEarning,proto3" json:"price_to_earning,omitempty"`
	GroupPriceToEarning           float32             `protobuf:"fixed32,27,opt,name=group_price_to_earning,json=groupPriceToEarning,proto3" json:"group_price_to_earning,omitempty"`
	EarningPerShare               uint32              `protobuf:"varint,28,opt,name=earning_per_share,json=earningPerShare,proto3" json:"earning_per_share,omitempty"`
	MarketValue                   uint64              `protobuf:"varint,29,opt,name=market_value,json=marketValue,proto3" json:"market_value,omitempty"`
	LastStateChangeDate           string              `protobuf:"bytes,30,opt,name=last_state_change_date,json=lastStateChangeDate,proto3" json:"last_state_change_date,omitempty"`
	BaazarVabasteType             BaazareVabasteType  `protobuf:"varint,31,opt,name=baazar_vabaste_type,json=baazarVabasteType,proto3,enum=afra.instrument.v1.BaazareVabasteType" json:"baazar_vabaste_type,omitempty"`
	ValidityType                  ValidityType        `protobuf:"varint,32,opt,name=validity_type,json=validityType,proto3,enum=afra.instrument.v1.ValidityType" json:"validity_type,omitempty"`
	InstrumentType                InstrumentType      `protobuf:"varint,33,opt,name=instrument_type,json=instrumentType,proto3,enum=afra.instrument.v1.InstrumentType" json:"instrument_type,omitempty"`
	LastTradedPrice               uint32              `protobuf:"varint,34,opt,name=last_traded_price,json=lastTradedPrice,proto3" json:"last_traded_price,omitempty"`
	LastTradedVolume              string              `protobuf:"bytes,35,opt,name=last_traded_volume,json=lastTradedVolume,proto3" json:"last_traded_volume,omitempty"`
	SellOrderList                 []*Order            `protobuf:"bytes,36,rep,name=sell_order_list,json=sellOrderList,proto3" json:"sell_order_list,omitempty"`
	BuyOrderList                  []*Order            `protobuf:"bytes,37,rep,name=buy_order_list,json=buyOrderList,proto3" json:"buy_order_list,omitempty"`
	RealPersonBuyersTradeReport   *TradeReport        `protobuf:"bytes,38,opt,name=real_person_buyers_trade_report,json=realPersonBuyersTradeReport,proto3" json:"real_person_buyers_trade_report,omitempty"`
	RealPersonSellersTradeReport  *TradeReport        `protobuf:"bytes,39,opt,name=real_person_sellers_trade_report,json=realPersonSellersTradeReport,proto3" json:"real_person_sellers_trade_report,omitempty"`
	LegalPersonBuyersTradeReport  *TradeReport        `protobuf:"bytes,40,opt,name=legal_person_buyers_trade_report,json=legalPersonBuyersTradeReport,proto3" json:"legal_person_buyers_trade_report,omitempty"`
	LegalPersonSellersTradeReport *TradeReport        `protobuf:"bytes,41,opt,name=legal_person_sellers_trade_report,json=legalPersonSellersTradeReport,proto3" json:"legal_person_sellers_trade_report,omitempty"`
	CurrentStateType              InstrumentStateType `protobuf:"varint,42,opt,name=current_state_type,json=currentStateType,proto3,enum=afra.instrument.v1.InstrumentStateType" json:"current_state_type,omitempty"`
	EffectOnTotalIndex            float32             `protobuf:"fixed32,43,opt,name=effect_on_total_index,json=effectOnTotalIndex,proto3" json:"effect_on_total_index,omitempty"`
}

func (x *InstrumentInfo) Reset() {
	*x = InstrumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_panel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentInfo) ProtoMessage() {}

func (x *InstrumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_panel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentInfo.ProtoReflect.Descriptor instead.
func (*InstrumentInfo) Descriptor() ([]byte, []int) {
	return file_protos_panel_proto_rawDescGZIP(), []int{13}
}

func (x *InstrumentInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *InstrumentInfo) GetLastActiveDate() string {
	if x != nil {
		return x.LastActiveDate
	}
	return ""
}

func (x *InstrumentInfo) GetTseId() string {
	if x != nil {
		return x.TseId
	}
	return ""
}

func (x *InstrumentInfo) GetLatinCode() string {
	if x != nil {
		return x.LatinCode
	}
	return ""
}

func (x *InstrumentInfo) GetLatinName() string {
	if x != nil {
		return x.LatinName
	}
	return ""
}

func (x *InstrumentInfo) GetPersianCode() string {
	if x != nil {
		return x.PersianCode
	}
	return ""
}

func (x *InstrumentInfo) GetPersianName() string {
	if x != nil {
		return x.PersianName
	}
	return ""
}

func (x *InstrumentInfo) GetParValue() uint32 {
	if x != nil {
		return x.ParValue
	}
	return 0
}

func (x *InstrumentInfo) GetSharesCount() uint64 {
	if x != nil {
		return x.SharesCount
	}
	return 0
}

func (x *InstrumentInfo) GetFirstTradeDate() string {
	if x != nil {
		return x.FirstTradeDate
	}
	return ""
}

func (x *InstrumentInfo) GetMarket() Market {
	if x != nil {
		return x.Market
	}
	return Market_BOURSE
}

func (x *InstrumentInfo) GetSectorId() string {
	if x != nil {
		return x.SectorId
	}
	return ""
}

func (x *InstrumentInfo) GetSubSectorId() string {
	if x != nil {
		return x.SubSectorId
	}
	return ""
}

func (x *InstrumentInfo) GetMaximumAllowedPrice() uint32 {
	if x != nil {
		return x.MaximumAllowedPrice
	}
	return 0
}

func (x *InstrumentInfo) GetMinimumAllowedPrice() uint32 {
	if x != nil {
		return x.MinimumAllowedPrice
	}
	return 0
}

func (x *InstrumentInfo) GetBaseShareVolume() uint64 {
	if x != nil {
		return x.BaseShareVolume
	}
	return 0
}

func (x *InstrumentInfo) GetTick() uint32 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *InstrumentInfo) GetMinimumSharesNumber() uint32 {
	if x != nil {
		return x.MinimumSharesNumber
	}
	return 0
}

func (x *InstrumentInfo) GetCompanyIsin() string {
	if x != nil {
		return x.CompanyIsin
	}
	return ""
}

func (x *InstrumentInfo) GetCompanyLatinCode() string {
	if x != nil {
		return x.CompanyLatinCode
	}
	return ""
}

func (x *InstrumentInfo) GetCompanyPersianName() string {
	if x != nil {
		return x.CompanyPersianName
	}
	return ""
}

func (x *InstrumentInfo) GetYesterdayPrice() uint32 {
	if x != nil {
		return x.YesterdayPrice
	}
	return 0
}

func (x *InstrumentInfo) GetYesterdayTradedVolume() string {
	if x != nil {
		return x.YesterdayTradedVolume
	}
	return ""
}

func (x *InstrumentInfo) GetTodayOpeningPrice() uint32 {
	if x != nil {
		return x.TodayOpeningPrice
	}
	return 0
}

func (x *InstrumentInfo) GetTodayClosingPrice() uint32 {
	if x != nil {
		return x.TodayClosingPrice
	}
	return 0
}

func (x *InstrumentInfo) GetPriceToEarning() float32 {
	if x != nil {
		return x.PriceToEarning
	}
	return 0
}

func (x *InstrumentInfo) GetGroupPriceToEarning() float32 {
	if x != nil {
		return x.GroupPriceToEarning
	}
	return 0
}

func (x *InstrumentInfo) GetEarningPerShare() uint32 {
	if x != nil {
		return x.EarningPerShare
	}
	return 0
}

func (x *InstrumentInfo) GetMarketValue() uint64 {
	if x != nil {
		return x.MarketValue
	}
	return 0
}

func (x *InstrumentInfo) GetLastStateChangeDate() string {
	if x != nil {
		return x.LastStateChangeDate
	}
	return ""
}

func (x *InstrumentInfo) GetBaazarVabasteType() BaazareVabasteType {
	if x != nil {
		return x.BaazarVabasteType
	}
	return BaazareVabasteType_NORMAL
}

func (x *InstrumentInfo) GetValidityType() ValidityType {
	if x != nil {
		return x.ValidityType
	}
	return ValidityType_ALL
}

func (x *InstrumentInfo) GetInstrumentType() InstrumentType {
	if x != nil {
		return x.InstrumentType
	}
	return InstrumentType_SHAKHESE_GHEIMAT__SHAKHES
}

func (x *InstrumentInfo) GetLastTradedPrice() uint32 {
	if x != nil {
		return x.LastTradedPrice
	}
	return 0
}

func (x *InstrumentInfo) GetLastTradedVolume() string {
	if x != nil {
		return x.LastTradedVolume
	}
	return ""
}

func (x *InstrumentInfo) GetSellOrderList() []*Order {
	if x != nil {
		return x.SellOrderList
	}
	return nil
}

func (x *InstrumentInfo) GetBuyOrderList() []*Order {
	if x != nil {
		return x.BuyOrderList
	}
	return nil
}

func (x *InstrumentInfo) GetRealPersonBuyersTradeReport() *TradeReport {
	if x != nil {
		return x.RealPersonBuyersTradeReport
	}
	return nil
}

func (x *InstrumentInfo) GetRealPersonSellersTradeReport() *TradeReport {
	if x != nil {
		return x.RealPersonSellersTradeReport
	}
	return nil
}

func (x *InstrumentInfo) GetLegalPersonBuyersTradeReport() *TradeReport {
	if x != nil {
		return x.LegalPersonBuyersTradeReport
	}
	return nil
}

func (x *InstrumentInfo) GetLegalPersonSellersTradeReport() *TradeReport {
	if x != nil {
		return x.LegalPersonSellersTradeReport
	}
	return nil
}

func (x *InstrumentInfo) GetCurrentStateType() InstrumentStateType {
	if x != nil {
		return x.CurrentStateType
	}
	return InstrumentStateType_MOJAZ
}

func (x *InstrumentInfo) GetEffectOnTotalIndex() float32 {
	if x != nil {
		return x.EffectOnTotalIndex
	}
	return 0
}

var File_protos_panel_proto protoreflect.FileDescriptor

var file_protos_panel_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x22, 0x67, 0x0a, 0x1c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x5d, 0x0a, 0x17, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x78, 0x0a, 0x14, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x0a,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x0f, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xcf, 0x02, 0x0a, 0x19, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x79, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79,
	0x46, 0x75, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x65,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19,
	0x66, 0x75, 0x6e, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcb, 0x01, 0x0a,
	0x14, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x6f, 0x77, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x6f, 0x77,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x17, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a,
	0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbc, 0x06, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x1f, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x1b, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x75,
	0x79, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x67, 0x0a, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x66, 0x72, 0x61,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x1c, 0x72, 0x65, 0x61, 0x6c,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x67, 0x0a, 0x20, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x1c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x42, 0x75, 0x79, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x69, 0x0a, 0x21, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x1d, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x55, 0x0a, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xbc, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xc3, 0x11, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61,
	0x74, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x61, 0x74, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x74,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x61, 0x74, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x73, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4c, 0x61, 0x74, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x50, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64,
	0x61, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61,
	0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x43, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x56, 0x0a, 0x13, 0x62, 0x61, 0x61, 0x7a, 0x61, 0x72, 0x5f, 0x76, 0x61, 0x62, 0x61, 0x73,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x61, 0x7a, 0x61, 0x72, 0x65, 0x56, 0x61, 0x62, 0x61, 0x73, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x62, 0x61, 0x61, 0x7a, 0x61, 0x72, 0x56, 0x61, 0x62,
	0x61, 0x73, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4b, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x62, 0x75, 0x79,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x25, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x62, 0x75,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x1f, 0x72, 0x65,
	0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x1b, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x42, 0x75, 0x79, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x67, 0x0a, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x66,
	0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x1c, 0x72, 0x65,
	0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x67, 0x0a, 0x20, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x1c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x42, 0x75, 0x79, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x69, 0x0a, 0x21, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x1d, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x55,
	0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x66, 0x72,
	0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4f, 0x6e, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2a, 0x8c, 0x02, 0x0a, 0x0d, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x5f, 0x35, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x5f, 0x31, 0x30, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x5f, 0x31, 0x35, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x5f, 0x33, 0x30, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x6f, 0x75, 0x72, 0x5f, 0x31, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x6f, 0x75, 0x72, 0x5f, 0x33, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x48, 0x6f, 0x75, 0x72, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x6f, 0x75,
	0x72, 0x5f, 0x31, 0x32, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x61, 0x79, 0x5f, 0x31, 0x10,
	0x08, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x61, 0x79, 0x5f, 0x32, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x61, 0x79, 0x5f, 0x33, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x65, 0x65, 0x6b, 0x5f,
	0x31, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x65, 0x65, 0x6b, 0x5f, 0x32, 0x10, 0x0c, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x31, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x32, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x5f, 0x33, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x5f,
	0x36, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x65, 0x61, 0x72, 0x5f, 0x31, 0x10, 0x11, 0x12,
	0x0a, 0x0a, 0x06, 0x59, 0x65, 0x61, 0x72, 0x5f, 0x32, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x59,
	0x65, 0x61, 0x72, 0x5f, 0x33, 0x10, 0x13, 0x2a, 0x5a, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x46, 0x41, 0x52, 0x41, 0x5f, 0x42, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x5f, 0x4b, 0x41, 0x4c, 0x41, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x5f, 0x41, 0x41, 0x54,
	0x49, 0x10, 0x04, 0x2a, 0xa1, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x4f, 0x4a, 0x41, 0x5a, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4d, 0x4e, 0x4f, 0x45,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x4a, 0x41, 0x5a, 0x5f, 0x4d, 0x41, 0x53, 0x44,
	0x4f, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x4a, 0x41, 0x5a, 0x5f, 0x4d, 0x4f,
	0x54, 0x41, 0x56, 0x41, 0x47, 0x45, 0x46, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x4a,
	0x41, 0x5a, 0x5f, 0x4d, 0x41, 0x48, 0x46, 0x4f, 0x5a, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x41, 0x4d, 0x4e, 0x4f, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x44, 0x4f, 0x44, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x41, 0x4d, 0x4e, 0x4f, 0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x41, 0x56, 0x41, 0x47,
	0x45, 0x46, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x4d, 0x4e, 0x4f, 0x45, 0x5f, 0x4d,
	0x41, 0x48, 0x46, 0x4f, 0x5a, 0x10, 0x07, 0x2a, 0x7c, 0x0a, 0x12, 0x42, 0x61, 0x61, 0x7a, 0x61,
	0x72, 0x65, 0x56, 0x61, 0x62, 0x61, 0x73, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x48, 0x4f,
	0x52, 0x44, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4f, 0x53, 0x48, 0x49, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x4a, 0x4f, 0x42, 0x52, 0x41, 0x4e, 0x49, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c,
	0x4f, 0x4b, 0x49, 0x5f, 0x4f, 0x4d, 0x44, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x48,
	0x41, 0x52, 0x49, 0x44, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x48, 0x45, 0x53, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x41, 0x5a, 0x49, 0x52, 0x4f, 0x46, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x53, 0x48,
	0x4f, 0x44, 0x45, 0x10, 0x05, 0x2a, 0x38, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10, 0x02, 0x2a,
	0xed, 0x0c, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x48, 0x41, 0x4b, 0x48, 0x45, 0x53, 0x45, 0x5f, 0x47,
	0x48, 0x45, 0x49, 0x4d, 0x41, 0x54, 0x5f, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x48, 0x45, 0x53, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x41, 0x4b, 0x48, 0x45, 0x53, 0x45, 0x5f, 0x5f, 0x53,
	0x48, 0x41, 0x4b, 0x48, 0x45, 0x53, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x52, 0x41, 0x47,
	0x48, 0x45, 0x5f, 0x53, 0x41, 0x4b, 0x4f, 0x4b, 0x5f, 0x5f, 0x4f, 0x52, 0x41, 0x47, 0x48, 0x45,
	0x5f, 0x4d, 0x4f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x4b, 0x41, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x41, 0x48, 0x41, 0x4d, 0x5f, 0x5f, 0x53, 0x41, 0x48, 0x41, 0x4d, 0x45, 0x5f, 0x41,
	0x44, 0x49, 0x10, 0x03, 0x12, 0x45, 0x0a, 0x41, 0x53, 0x41, 0x4e, 0x44, 0x4f, 0x47, 0x48, 0x45,
	0x5f, 0x53, 0x41, 0x52, 0x4d, 0x41, 0x59, 0x45, 0x5f, 0x47, 0x4f, 0x5a, 0x41, 0x52, 0x59, 0x5f,
	0x44, 0x41, 0x52, 0x5f, 0x53, 0x41, 0x48, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x52, 0x53,
	0x5f, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x4f, 0x47, 0x48, 0x45, 0x5f, 0x53, 0x41, 0x52, 0x4d, 0x41,
	0x59, 0x45, 0x5f, 0x47, 0x4f, 0x5a, 0x41, 0x52, 0x59, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x45, 0x53, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x45, 0x5f, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x45,
	0x5f, 0x50, 0x41, 0x59, 0x45, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4b, 0x48, 0x54, 0x49,
	0x41, 0x52, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x41, 0x44, 0x45, 0x5f, 0x48, 0x4f, 0x52, 0x4d, 0x4f,
	0x5a, 0x47, 0x41, 0x4e, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4b, 0x48, 0x54, 0x49, 0x41,
	0x52, 0x45, 0x5f, 0x4b, 0x48, 0x5f, 0x41, 0x4b, 0x48, 0x5a, 0x41, 0x10, 0x07, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4b, 0x48, 0x54, 0x49, 0x41, 0x52, 0x45, 0x5f, 0x46, 0x5f, 0x41, 0x4b, 0x48, 0x5a,
	0x41, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x41, 0x47, 0x48, 0x45, 0x5f, 0x54, 0x41, 0x47,
	0x48, 0x41, 0x44, 0x4f, 0x4d, 0x45, 0x5f, 0x53, 0x41, 0x48, 0x4d, 0x5f, 0x5f, 0x48, 0x41, 0x47,
	0x48, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x48, 0x41, 0x44, 0x4f, 0x4d, 0x10, 0x09, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x48, 0x41, 0x4b, 0x48, 0x45, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x52, 0x41, 0x42, 0x4f,
	0x55, 0x52, 0x53, 0x5f, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x48, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x28,
	0x0a, 0x24, 0x53, 0x41, 0x4b, 0x4f, 0x4b, 0x5f, 0x45, 0x4b, 0x48, 0x54, 0x45, 0x53, 0x41, 0x53,
	0x49, 0x5f, 0x5f, 0x4f, 0x52, 0x41, 0x47, 0x48, 0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x4b, 0x41, 0x54, 0x5f, 0x30, 0x10, 0x0b, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x41, 0x4b, 0x4f,
	0x4b, 0x5f, 0x45, 0x4b, 0x48, 0x54, 0x45, 0x53, 0x41, 0x53, 0x49, 0x5f, 0x5f, 0x4f, 0x52, 0x41,
	0x47, 0x48, 0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x4b, 0x41, 0x54, 0x5f, 0x31,
	0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x54, 0x49, 0x53, 0x49, 0x5f, 0x5f, 0x53, 0x41, 0x48,
	0x41, 0x4d, 0x45, 0x5f, 0x41, 0x44, 0x49, 0x10, 0x0d, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x52, 0x41,
	0x47, 0x48, 0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x4b, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x54, 0x49, 0x53, 0x49, 0x5f, 0x5f, 0x4f, 0x52, 0x41, 0x47, 0x48, 0x45, 0x5f, 0x4d, 0x4f,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x4b, 0x41, 0x54, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x41,
	0x53, 0x48, 0x49, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x52, 0x41, 0x42, 0x4f, 0x55, 0x52,
	0x53, 0x5f, 0x5f, 0x53, 0x41, 0x48, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x44, 0x49, 0x10, 0x0f, 0x12,
	0x2d, 0x0a, 0x29, 0x53, 0x48, 0x45, 0x52, 0x4b, 0x41, 0x54, 0x48, 0x41, 0x59, 0x45, 0x5f, 0x4b,
	0x4f, 0x43, 0x48, 0x41, 0x4b, 0x4f, 0x5f, 0x4d, 0x4f, 0x54, 0x45, 0x56, 0x41, 0x53, 0x45, 0x54,
	0x5f, 0x5f, 0x53, 0x41, 0x48, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x44, 0x49, 0x10, 0x10, 0x12, 0x29,
	0x0a, 0x25, 0x48, 0x41, 0x47, 0x48, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x48, 0x41, 0x44, 0x4f, 0x4d,
	0x45, 0x5f, 0x4f, 0x54, 0x49, 0x53, 0x49, 0x5f, 0x5f, 0x48, 0x41, 0x47, 0x48, 0x45, 0x5f, 0x54,
	0x41, 0x47, 0x48, 0x41, 0x44, 0x4f, 0x4d, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4b, 0x48,
	0x54, 0x49, 0x41, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4f, 0x53, 0x48, 0x45, 0x5f, 0x54, 0x41,
	0x42, 0x41, 0x59, 0x49, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x41, 0x52, 0x41, 0x59, 0x49,
	0x5f, 0x46, 0x45, 0x4b, 0x52, 0x49, 0x5f, 0x5f, 0x44, 0x41, 0x52, 0x41, 0x59, 0x49, 0x5f, 0x46,
	0x45, 0x4b, 0x52, 0x49, 0x10, 0x13, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x52, 0x41, 0x47, 0x48, 0x45,
	0x5f, 0x4d, 0x4f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x4b, 0x41, 0x54, 0x5f, 0x5f, 0x4f, 0x52, 0x41,
	0x47, 0x48, 0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x4b, 0x41, 0x54, 0x10, 0x14,
	0x12, 0x14, 0x0a, 0x10, 0x41, 0x41, 0x54, 0x49, 0x5f, 0x5f, 0x53, 0x41, 0x48, 0x41, 0x4d, 0x45,
	0x5f, 0x41, 0x44, 0x49, 0x10, 0x15, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4b, 0x48, 0x54, 0x49, 0x41,
	0x52, 0x45, 0x5f, 0x4b, 0x48, 0x41, 0x52, 0x49, 0x44, 0x5f, 0x5f, 0x53, 0x41, 0x48, 0x41, 0x4d,
	0x45, 0x5f, 0x41, 0x44, 0x49, 0x10, 0x16, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4b, 0x48, 0x54, 0x49,
	0x41, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4f, 0x53, 0x48, 0x5f, 0x5f, 0x53, 0x41, 0x48, 0x41,
	0x4d, 0x45, 0x5f, 0x41, 0x44, 0x49, 0x10, 0x17, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4b, 0x48, 0x54,
	0x49, 0x41, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4f, 0x53, 0x48, 0x45, 0x5f, 0x54, 0x41, 0x42,
	0x41, 0x59, 0x49, 0x5f, 0x5f, 0x45, 0x4b, 0x48, 0x54, 0x49, 0x41, 0x52, 0x10, 0x18, 0x12, 0x2e,
	0x0a, 0x2a, 0x45, 0x4b, 0x48, 0x54, 0x49, 0x41, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4f, 0x53,
	0x48, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x41, 0x59, 0x49, 0x5f, 0x46, 0x41, 0x52, 0x41, 0x42, 0x4f,
	0x55, 0x52, 0x53, 0x5f, 0x5f, 0x45, 0x4b, 0x48, 0x54, 0x49, 0x41, 0x52, 0x10, 0x19, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x41, 0x59, 0x45, 0x5f, 0x5f, 0x53, 0x41, 0x48, 0x41, 0x4d, 0x45, 0x5f, 0x41,
	0x44, 0x49, 0x10, 0x1a, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x41, 0x47, 0x48, 0x45, 0x5f, 0x54, 0x41,
	0x47, 0x48, 0x41, 0x44, 0x4f, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x45, 0x5f, 0x5f, 0x48, 0x41,
	0x47, 0x48, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x48, 0x41, 0x44, 0x4f, 0x4d, 0x10, 0x1b, 0x12, 0x37,
	0x0a, 0x33, 0x4f, 0x52, 0x41, 0x47, 0x48, 0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x4b, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x52, 0x5a, 0x45, 0x5f, 0x53, 0x41, 0x44, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x5f, 0x5f, 0x4f, 0x52, 0x41, 0x47, 0x48, 0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x4b, 0x41, 0x54, 0x10, 0x1c, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x52, 0x41, 0x47, 0x48,
	0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x4b, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e,
	0x45, 0x52, 0x47, 0x59, 0x5f, 0x5f, 0x4f, 0x52, 0x41, 0x47, 0x48, 0x45, 0x5f, 0x4d, 0x4f, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x4b, 0x41, 0x54, 0x10, 0x1d, 0x12, 0x4d, 0x0a, 0x49, 0x53, 0x41, 0x4e,
	0x44, 0x4f, 0x47, 0x48, 0x45, 0x5f, 0x53, 0x41, 0x52, 0x4d, 0x41, 0x59, 0x45, 0x5f, 0x47, 0x4f,
	0x5a, 0x41, 0x52, 0x59, 0x5f, 0x47, 0x48, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x41,
	0x4d, 0x45, 0x4c, 0x45, 0x59, 0x45, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x5f, 0x53,
	0x41, 0x4e, 0x44, 0x4f, 0x47, 0x48, 0x45, 0x5f, 0x53, 0x41, 0x52, 0x4d, 0x41, 0x59, 0x45, 0x5f,
	0x47, 0x4f, 0x5a, 0x41, 0x52, 0x59, 0x10, 0x1e, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x41, 0x4c, 0x41,
	0x46, 0x5f, 0x42, 0x4f, 0x55, 0x52, 0x53, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x31,
	0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x41, 0x4c, 0x41, 0x46, 0x5f, 0x42, 0x4f, 0x55, 0x52,
	0x53, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x32, 0x10, 0x20, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x41, 0x4c, 0x41, 0x46, 0x5f, 0x42, 0x4f, 0x55, 0x52, 0x53, 0x5f, 0x45, 0x4e, 0x45, 0x52,
	0x47, 0x59, 0x5f, 0x33, 0x10, 0x21, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x41, 0x4c, 0x41, 0x46, 0x5f,
	0x42, 0x4f, 0x55, 0x52, 0x53, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x34, 0x10, 0x22,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x31, 0x10, 0x23, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x32, 0x10, 0x24, 0x12, 0x2e, 0x0a, 0x2a,
	0x4f, 0x52, 0x41, 0x47, 0x48, 0x45, 0x5f, 0x4d, 0x4f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x4b, 0x41,
	0x54, 0x45, 0x5f, 0x4b, 0x41, 0x4c, 0x41, 0x5f, 0x5f, 0x4f, 0x52, 0x41, 0x47, 0x48, 0x45, 0x5f,
	0x4d, 0x4f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x4b, 0x41, 0x54, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e,
	0x47, 0x4f, 0x56, 0x41, 0x48, 0x49, 0x45, 0x5f, 0x53, 0x45, 0x50, 0x4f, 0x52, 0x44, 0x45, 0x59,
	0x45, 0x5f, 0x4b, 0x41, 0x4c, 0x41, 0x45, 0x49, 0x5f, 0x5f, 0x4b, 0x41, 0x4c, 0x41, 0x10, 0x26,
	0x12, 0x11, 0x0a, 0x0d, 0x4a, 0x41, 0x59, 0x45, 0x5a, 0x45, 0x59, 0x45, 0x5f, 0x53, 0x41, 0x48,
	0x4d, 0x10, 0x27, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x41, 0x42, 0x41, 0x44, 0x45, 0x5f, 0x47, 0x48,
	0x41, 0x42, 0x45, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x41, 0x4d, 0x45, 0x4c, 0x45, 0x5f, 0x44, 0x41,
	0x52, 0x5f, 0x42, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x28, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x4f, 0x56,
	0x41, 0x48, 0x49, 0x45, 0x5f, 0x4b, 0x48, 0x41, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x41, 0x48,
	0x4d, 0x10, 0x29, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x41, 0x42, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x4f,
	0x53, 0x48, 0x41, 0x45, 0x45, 0x10, 0x2a, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x34, 0x30, 0x32, 0x10, 0x2b, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x38, 0x30, 0x35, 0x10, 0x2c, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x34, 0x30, 0x31, 0x10, 0x2d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x36, 0x30, 0x35, 0x10, 0x2e, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x33, 0x31, 0x30, 0x10, 0x2f, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x33, 0x38, 0x30, 0x10, 0x30, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x33, 0x32, 0x30, 0x10, 0x31, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x32, 0x30, 0x31, 0x10, 0x32, 0x32,
	0xfa, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x79,
	0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x30, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x2b, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x2e, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2b, 0x2e,
	0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x80, 0x01, 0x0a,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x77, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x28, 0x2e, 0x61, 0x66, 0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x30, 0x2e, 0x61, 0x66,
	0x72, 0x61, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_panel_proto_rawDescOnce sync.Once
	file_protos_panel_proto_rawDescData = file_protos_panel_proto_rawDesc
)

func file_protos_panel_proto_rawDescGZIP() []byte {
	file_protos_panel_proto_rawDescOnce.Do(func() {
		file_protos_panel_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_panel_proto_rawDescData)
	})
	return file_protos_panel_proto_rawDescData
}

var file_protos_panel_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_protos_panel_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_protos_panel_proto_goTypes = []interface{}{
	(TimeScaleType)(0),                   // 0: afra.instrument.v1.TimeScaleType
	(Market)(0),                          // 1: afra.instrument.v1.Market
	(InstrumentStateType)(0),             // 2: afra.instrument.v1.InstrumentStateType
	(BaazareVabasteType)(0),              // 3: afra.instrument.v1.BaazareVabasteType
	(ValidityType)(0),                    // 4: afra.instrument.v1.ValidityType
	(InstrumentType)(0),                  // 5: afra.instrument.v1.InstrumentType
	(*IndexHistoricalPriceResponse)(nil), // 6: afra.instrument.v1.IndexHistoricalPriceResponse
	(*HistoricalPriceResponse)(nil),      // 7: afra.instrument.v1.HistoricalPriceResponse
	(*IndexHistoricalPrice)(nil),         // 8: afra.instrument.v1.IndexHistoricalPrice
	(*HistoricalPrice)(nil),              // 9: afra.instrument.v1.HistoricalPrice
	(*IndexHistoricalPricePoint)(nil),    // 10: afra.instrument.v1.IndexHistoricalPricePoint
	(*HistoricalPricePoint)(nil),         // 11: afra.instrument.v1.HistoricalPricePoint
	(*HistoricalPriceQuery)(nil),         // 12: afra.instrument.v1.HistoricalPriceQuery
	(*InstrumentSnapshotQuery)(nil),      // 13: afra.instrument.v1.InstrumentSnapshotQuery
	(*Order)(nil),                        // 14: afra.instrument.v1.Order
	(*TradeReport)(nil),                  // 15: afra.instrument.v1.TradeReport
	(*InstrumentSnapshotResponse)(nil),   // 16: afra.instrument.v1.InstrumentSnapshotResponse
	(*SearchInstrumentInfoQuery)(nil),    // 17: afra.instrument.v1.SearchInstrumentInfoQuery
	(*SearchInstrumentInfoResponse)(nil), // 18: afra.instrument.v1.SearchInstrumentInfoResponse
	(*InstrumentInfo)(nil),               // 19: afra.instrument.v1.InstrumentInfo
}
var file_protos_panel_proto_depIdxs = []int32{
	8,  // 0: afra.instrument.v1.IndexHistoricalPriceResponse.price_list:type_name -> afra.instrument.v1.IndexHistoricalPrice
	9,  // 1: afra.instrument.v1.HistoricalPriceResponse.price_list:type_name -> afra.instrument.v1.HistoricalPrice
	10, // 2: afra.instrument.v1.IndexHistoricalPrice.point_list:type_name -> afra.instrument.v1.IndexHistoricalPricePoint
	11, // 3: afra.instrument.v1.HistoricalPrice.point_list:type_name -> afra.instrument.v1.HistoricalPricePoint
	0,  // 4: afra.instrument.v1.HistoricalPriceQuery.time_scale:type_name -> afra.instrument.v1.TimeScaleType
	14, // 5: afra.instrument.v1.InstrumentSnapshotResponse.sell_order_list:type_name -> afra.instrument.v1.Order
	14, // 6: afra.instrument.v1.InstrumentSnapshotResponse.buy_order_list:type_name -> afra.instrument.v1.Order
	15, // 7: afra.instrument.v1.InstrumentSnapshotResponse.real_person_buyers_trade_report:type_name -> afra.instrument.v1.TradeReport
	15, // 8: afra.instrument.v1.InstrumentSnapshotResponse.real_person_sellers_trade_report:type_name -> afra.instrument.v1.TradeReport
	15, // 9: afra.instrument.v1.InstrumentSnapshotResponse.legal_person_buyers_trade_report:type_name -> afra.instrument.v1.TradeReport
	15, // 10: afra.instrument.v1.InstrumentSnapshotResponse.legal_person_sellers_trade_report:type_name -> afra.instrument.v1.TradeReport
	2,  // 11: afra.instrument.v1.InstrumentSnapshotResponse.current_state_type:type_name -> afra.instrument.v1.InstrumentStateType
	1,  // 12: afra.instrument.v1.SearchInstrumentInfoQuery.market_list:type_name -> afra.instrument.v1.Market
	4,  // 13: afra.instrument.v1.SearchInstrumentInfoQuery.validity_type:type_name -> afra.instrument.v1.ValidityType
	19, // 14: afra.instrument.v1.SearchInstrumentInfoResponse.instrument_list:type_name -> afra.instrument.v1.InstrumentInfo
	1,  // 15: afra.instrument.v1.InstrumentInfo.market:type_name -> afra.instrument.v1.Market
	3,  // 16: afra.instrument.v1.InstrumentInfo.baazar_vabaste_type:type_name -> afra.instrument.v1.BaazareVabasteType
	4,  // 17: afra.instrument.v1.InstrumentInfo.validity_type:type_name -> afra.instrument.v1.ValidityType
	5,  // 18: afra.instrument.v1.InstrumentInfo.instrument_type:type_name -> afra.instrument.v1.InstrumentType
	14, // 19: afra.instrument.v1.InstrumentInfo.sell_order_list:type_name -> afra.instrument.v1.Order
	14, // 20: afra.instrument.v1.InstrumentInfo.buy_order_list:type_name -> afra.instrument.v1.Order
	15, // 21: afra.instrument.v1.InstrumentInfo.real_person_buyers_trade_report:type_name -> afra.instrument.v1.TradeReport
	15, // 22: afra.instrument.v1.InstrumentInfo.real_person_sellers_trade_report:type_name -> afra.instrument.v1.TradeReport
	15, // 23: afra.instrument.v1.InstrumentInfo.legal_person_buyers_trade_report:type_name -> afra.instrument.v1.TradeReport
	15, // 24: afra.instrument.v1.InstrumentInfo.legal_person_sellers_trade_report:type_name -> afra.instrument.v1.TradeReport
	2,  // 25: afra.instrument.v1.InstrumentInfo.current_state_type:type_name -> afra.instrument.v1.InstrumentStateType
	17, // 26: afra.instrument.v1.Instrument.SearchInstrumentInfo:input_type -> afra.instrument.v1.SearchInstrumentInfoQuery
	13, // 27: afra.instrument.v1.Instrument.GetInstrumentSnapshot:input_type -> afra.instrument.v1.InstrumentSnapshotQuery
	12, // 28: afra.instrument.v1.Instrument.GetInstrumentHistoricalPrice:input_type -> afra.instrument.v1.HistoricalPriceQuery
	12, // 29: afra.instrument.v1.Index.GetIndexHistoricalPrice:input_type -> afra.instrument.v1.HistoricalPriceQuery
	18, // 30: afra.instrument.v1.Instrument.SearchInstrumentInfo:output_type -> afra.instrument.v1.SearchInstrumentInfoResponse
	16, // 31: afra.instrument.v1.Instrument.GetInstrumentSnapshot:output_type -> afra.instrument.v1.InstrumentSnapshotResponse
	7,  // 32: afra.instrument.v1.Instrument.GetInstrumentHistoricalPrice:output_type -> afra.instrument.v1.HistoricalPriceResponse
	6,  // 33: afra.instrument.v1.Index.GetIndexHistoricalPrice:output_type -> afra.instrument.v1.IndexHistoricalPriceResponse
	30, // [30:34] is the sub-list for method output_type
	26, // [26:30] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_protos_panel_proto_init() }
func file_protos_panel_proto_init() {
	if File_protos_panel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_panel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexHistoricalPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_panel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_panel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexHistoricalPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_panel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_panel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexHistoricalPricePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_panel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalPricePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_panel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalPriceQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_panel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentSnapshotQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_panel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_panel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_panel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_panel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInstrumentInfoQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_panel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchInstrumentInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_panel_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_panel_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_protos_panel_proto_goTypes,
		DependencyIndexes: file_protos_panel_proto_depIdxs,
		EnumInfos:         file_protos_panel_proto_enumTypes,
		MessageInfos:      file_protos_panel_proto_msgTypes,
	}.Build()
	File_protos_panel_proto = out.File
	file_protos_panel_proto_rawDesc = nil
	file_protos_panel_proto_goTypes = nil
	file_protos_panel_proto_depIdxs = nil
}
